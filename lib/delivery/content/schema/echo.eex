import * as Immutable from 'immutable';
import { augment, ensureIdGuidPresent } from '../common';

export type <%= name %>Params = {
  <%= for field <- fields do %>
  <%= field.name %>?: <%= field.type %>,
  <% end %>
  guid?: string,
};

const defaultContent = {
  contentType: '<%= name %>',
  elementType: '<%= String.downcase(name) %>',
  <%= for field <- fields do %>
  <%= field.name %>: <%= field.default %>,
  <% end %>
  guid: '',
};

export class <%= name %> extends Immutable.Record(defaultContent) {

  contentType: '<%= name %>';
  elementType: '<%= String.downcase(name) %>';
  <%= for field <- fields do %>
  <%= field.name %>: <%= field.type %>;
  <% end %>
  guid: string;

  constructor(params?: <%= name %>Params) {
    super(augment(params));
  }

  with(values: <%= name %>Params) {
    return this.merge(values) as this;
  }

  clone() : <%= name %> {
    return ensureIdGuidPresent(this);
  }
}
